language: cpp
sudo: false

addons:
  apt:
    packages:
      - valgrind
      - g++-6
    sources: &sources
      - ubuntu-toolchain-r-test


cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.9.0
    - ${TRAVIS_BUILD_DIR}/deps/llvm-4.0.0
    - ${TRAVIS_BUILD_DIR}/deps/llvm-5.0.0


matrix:
  include:
    # Clang 3.9
    - os: linux
      env: COMPILER=clang++-3.9 LLVM_VERSION=3.9.0
      compiler: clang

    # Clang 4.0
    - os: linux
      env: COMPILER=clang++-4.0 LLVM_VERSION=4.0.0
      compiler: clang

    # Clang 5.0
    - os: linux
      env: COMPILER=clang++-5.0 LLVM_VERSION=5.0.0
      compiler: clang

    # GCC 5
    - os: linux
      env: COMPILER=g++-5
      compiler: gcc

    # GCC 6
    - os: linux
      env: COMPILER=g++-6
      compiler: gcc

    # GCC 7
    - os: linux
      env: COMPILER=g++-7
      compiler: gcc

    # Xcode 6.4
    - os: osx
      osx_image: xcode6.4

    # Xcode 7.3
    - os: osx
      osx_image: xcode7.3

    # Xcode 8
    - os: osx
      osx_image: xcode8


install:
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  - export CXX=${COMPILER}

  # Installing a recent version of Ruby (needed for Homebrew)
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      rvm use 2.3 --install --binary --fuzzy
      gem install ruby-progressbar tilt
    fi

  # Getting Boost for testing
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install libboost-test-dev; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install boost; fi

  # Getting CMake for building
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install cmake; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew upgrade cmake || brew install cmake; fi

  # Getting Doxygen for documentation
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install doxygen; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install doxygen; fi
  
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      LLVM_DIR=${DEPS_DIR}/llvm-${LLVM_VERSION}
      if [[ -z "$(ls -A ${LLVM_DIR})" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        CLANG_URL="http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz"
        mkdir -p ${LLVM_DIR} ${LLVM_DIR}/build ${LLVM_DIR}/projects/libcxx ${LLVM_DIR}/projects/libcxxabi ${LLVM_DIR}/clang
        travis_retry wget --quiet -O - ${LLVM_URL}      | tar --strip-components=1 -xJ -C ${LLVM_DIR}
        travis_retry wget --quiet -O - ${LIBCXX_URL}    | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxx
        travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxxabi
        travis_retry wget --quiet -O - ${CLANG_URL}     | tar --strip-components=1 -xJ -C ${LLVM_DIR}/clang
        (cd ${LLVM_DIR}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_DIR}/install -DCMAKE_CXX_COMPILER=clang++)
        (cd ${LLVM_DIR}/build/projects/libcxx && make install -j2)
        (cd ${LLVM_DIR}/build/projects/libcxxabi && make install -j2)
      fi
      export CXXFLAGS="-nostdinc++ -isystem ${LLVM_DIR}/install/include/c++/v1"
      export LDFLAGS="-L ${LLVM_DIR}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_DIR}/install/lib"
      export PATH="${LLVM_DIR}/clang/bin:${PATH}"
    fi
- ${CXX} --version

  # Getting latest version of LCOV for the linux debug build
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" && "$CONFIG" == "DEBUG" ]]; then
       wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz
       tar xf lcov_1.11.orig.tar.gz
       sudo make -C lcov-1.11/ install
       sudo apt-get install ruby1.9.1 ruby1.9.1-dev
       sudo apt-get install rubygems1.9.1 irb1.9.1 ri1.9.1
       rvmsudo gem install coveralls-lcov
    fi


before_script:
  # Set up the git identity (for pushing documentation)
  - git config --global user.name "Travis bot"
  - git config --global user.email "<>"

  # Initialize coverage to 0 on the Linux debug build
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" && "$CONFIG" == "DEBUG" ]]; then 
       cd ${TRAVIS_BUILD_DIR}
       lcov --directory . --zerocounters
    fi


script:
  - mkdir build
  - cd build
  - cmake -DCMAKE_BUILD_TYPE=Release ..
  - make
  - ctest
  #- python testrunner.py ${TRAVIS_BUILD_DIR} ${TRAVIS_BUILD_DIR}


after_success:
  # Sending coverage info collected with the Linux debug build
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" && "$CONFIG" == "DEBUG" ]]; then 
       cd ${TRAVIS_BUILD_DIR}
       lcov --directory . --capture --output-file coverage.info
       lcov --remove coverage.info 'tests/*' '/usr/*' --output-file coverage.info
       lcov --list coverage.info
       coveralls-lcov coverage.info
    fi
  
