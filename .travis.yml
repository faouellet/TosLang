language: cpp


# Listing all possible values that all the environment variables can take  
env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "a0oCq1Ga/3Y2dosiwmEOGGXhVWaj959zYi8GuecbKa1yjZwsHZ9rl4Q0ezeUfYndUhmFUlfACyQrky9ALNLnFiuABXdyPrzBM2oGnKs6bmUji3ZpMJVK5tVoXd1Z4uup1LsOGrOzNd/qoDUZR8/aT/w5Br/7iVpLaEc5H+Ru3/CUVbkIy2oMjyffqusmt84QDWQCwbR+NydFGuR9U46tfiZp9kplkmdike5pc7aP4FF+JsoopxhyCZJxrYm6ha1DxieCANyMwkEQhiImvDtvRM0NmpPoaX0TMP8VrdOD7kXf7cq7Jbvj3gImMBuUlcGUE+CApctqF4BVjjvBLWidUWHKsP/KcWhYREDwLIqimJWzS5+LLF7inxtWDI6dpFWBbHh90LGxMemtjTkc6ODbQO4BLF2kRyzcl1cmfLiAscONMYzWRrmLw/Y5aRDqUa+wpGd95Ct6ADG5TVN1Yl2/6kDU0MORrfWU0rqaTMNOuVkULzS1Bcd1gsMCavCjHf2HGcwXcy7zHGj9Gm94OkT0jdTpWzMPUJUEBHhxydKQM8VDJmWzxSt5y/JOcbfETv1cH8g+uNW1+io+6Rc3aILnIwyc2FlPGOCmmibbICxW5d2/vlzFRWruR77lEs02pGVVSsXaIycOgW12KqRY25Pi/WHakiqo0u8E6C5itap68ok="
  #matrix:
  #- SANITIZE=sanitize-address
  #- SANITIZE=sanitize-leak

   
matrix:
  include:
##### Linux GCC Debug build #####
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages: 
            - g++-5
      os: linux
      env: CONFIG=DEBUG COMPILER=g++-5 
##### Linux GCC Release build #####
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages: 
            - g++-5
      os: linux
      env: CONFIG=RELEASE COMPILER=g++-5
##### OSX GCC Debug build #####
    - compiler: gcc
      os: osx
      osx_image: xcode6.4
      env: CONFIG=DEBUG COMPILER=g++-5
##### OSX GCC Release build #####
    - compiler: gcc
      os: osx
      osx_image: xcode6.4
      env: CONFIG=RELEASE COMPILER=g++-5
##### Linux Clang Debug build #####
    - compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-precise-3.7
          packages: 
            - clang-3.7
      os: linux
      env: CONFIG=DEBUG COMPILER=clang++-3.7
##### Linux Clang Release build #####
    - compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-precise-3.7
          packages: 
            - clang-3.7
      os: linux
      env: CONFIG=RELEASE COMPILER=clang++-3.7
##### OSX Clang Debug build #####
    - compiler: clang
      os: osx
      osx_image: xcode6.4
      env: CONFIG=DEBUG COMPILER=clang++
##### OSX Clang Release build #####
    - compiler: clang
      os: osx
      osx_image: xcode6.4
      env: CONFIG=RELEASE COMPILER=clang++
##### Currently allowing Linux+Clang builds to fail because of apt repo problems #####
  allow_failures:
    - compiler: clang
      os: linux
    - compiler: gcc
      os: osx


# Addons for the Coverity static analysis service
addons:
  coverity_scan:
    project:
      name: "faouellet/Tostitos"
      description: "Build submitted via Travis CI"
    notification_email: faouellet@gmail.com
    build_command_prepend: "mkdir build; cd build; cmake .."
    build_command: "make"
    branch_pattern: coverity_scan


before_install:
  - if [["$TRAVIS_OS_NAME" == "linux"]]; then sudo apt-get update -qq; fi
  - if [["$TRAVIS_OS_NAME" == "osx"]]; then brew update; fi


install:  
  # Getting CppCheck for static analysis
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install cppcheck; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install cppcheck; fi
  
  # Getting g++-5 for the OSX builds
  - if [[ "$TRAVIS_OS_NAME" == "osx" && "$COMPILER" == "g++-5" ]]; then brew install homebrew/versions/gcc5; fi
  
  # Getting Boost for testing
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install libboost-test-dev; fi
  
  # Getting latest version of LCOV for the linux debug build
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" && "$CONFIG" == "DEBUG" && ${COVERITY_SCAN_BRANCH} != 1 ]]; then
       wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz
       tar xf lcov_1.11.orig.tar.gz
       sudo make -C lcov-1.11/ install
       sudo apt-get install ruby1.9.1 ruby1.9.1-dev
       sudo apt-get install rubygems1.9.1 irb1.9.1 ri1.9.1
       rvmsudo gem install coveralls-lcov
    fi


before_script:
  # Initialize coverage to 0 on the Linux debug build
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" && "$CONFIG" == "DEBUG" && ${COVERITY_SCAN_BRANCH} != 1 ]]; then 
       cd ${TRAVIS_BUILD_DIR}
       lcov --directory . --zerocounters
    fi


script:  
  - if [[ ${COVERITY_SCAN_BRANCH} != 1 ]]; then 
        cppcheck --error-exitcode=1 --quiet .;
    fi
    
  - mkdir build
  - cd build
  
  # The coverity branch doesn't require explicit build commands
  - |
    if [[ ${COVERITY_SCAN_BRANCH} != 1 ]]; then
       cmake -DCMAKE_BUILD_TYPE=$CONFIG -DCMAKE_CXX_COMPILER=$COMPILER ..
       make
       ctest
       #python testrunner.py ${TRAVIS_BUILD_DIR} ${TRAVIS_BUILD_DIR}
    fi


after_success:
  # Sending coverage info collected with the Linux debug build
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" && "$CONFIG" == "DEBUG" && ${COVERITY_SCAN_BRANCH} != 1 ]]; then 
       cd ${TRAVIS_BUILD_DIR}
       lcov --directory . --capture --output-file coverage.info
       lcov --remove coverage.info 'tests/*' '/usr/*' --output-file coverage.info
       lcov --list coverage.info
       coveralls-lcov coverage.info
    fi
  
